// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/logic/orm/model"
)

func newBlock(db *gorm.DB, opts ...gen.DOOption) block {
	_block := block{}

	_block.blockDo.UseDB(db, opts...)
	_block.blockDo.UseModel(&model.Block{})

	tableName := _block.blockDo.TableName()
	_block.ALL = field.NewAsterisk(tableName)
	_block.Key = field.NewString(tableName, "key")
	_block.GoodsID = field.NewString(tableName, "goods_id")

	_block.fillFieldMap()

	return _block
}

type block struct {
	blockDo

	ALL     field.Asterisk
	Key     field.String
	GoodsID field.String

	fieldMap map[string]field.Expr
}

func (b block) Table(newTableName string) *block {
	b.blockDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b block) As(alias string) *block {
	b.blockDo.DO = *(b.blockDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *block) updateTableName(table string) *block {
	b.ALL = field.NewAsterisk(table)
	b.Key = field.NewString(table, "key")
	b.GoodsID = field.NewString(table, "goods_id")

	b.fillFieldMap()

	return b
}

func (b *block) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *block) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 2)
	b.fieldMap["key"] = b.Key
	b.fieldMap["goods_id"] = b.GoodsID
}

func (b block) clone(db *gorm.DB) block {
	b.blockDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b block) replaceDB(db *gorm.DB) block {
	b.blockDo.ReplaceDB(db)
	return b
}

type blockDo struct{ gen.DO }

func (b blockDo) Debug() *blockDo {
	return b.withDO(b.DO.Debug())
}

func (b blockDo) WithContext(ctx context.Context) *blockDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b blockDo) ReadDB() *blockDo {
	return b.Clauses(dbresolver.Read)
}

func (b blockDo) WriteDB() *blockDo {
	return b.Clauses(dbresolver.Write)
}

func (b blockDo) Session(config *gorm.Session) *blockDo {
	return b.withDO(b.DO.Session(config))
}

func (b blockDo) Clauses(conds ...clause.Expression) *blockDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b blockDo) Returning(value interface{}, columns ...string) *blockDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b blockDo) Not(conds ...gen.Condition) *blockDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b blockDo) Or(conds ...gen.Condition) *blockDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b blockDo) Select(conds ...field.Expr) *blockDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b blockDo) Where(conds ...gen.Condition) *blockDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b blockDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *blockDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b blockDo) Order(conds ...field.Expr) *blockDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b blockDo) Distinct(cols ...field.Expr) *blockDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b blockDo) Omit(cols ...field.Expr) *blockDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b blockDo) Join(table schema.Tabler, on ...field.Expr) *blockDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b blockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *blockDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b blockDo) RightJoin(table schema.Tabler, on ...field.Expr) *blockDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b blockDo) Group(cols ...field.Expr) *blockDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b blockDo) Having(conds ...gen.Condition) *blockDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b blockDo) Limit(limit int) *blockDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b blockDo) Offset(offset int) *blockDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b blockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *blockDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b blockDo) Unscoped() *blockDo {
	return b.withDO(b.DO.Unscoped())
}

func (b blockDo) Create(values ...*model.Block) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b blockDo) CreateInBatches(values []*model.Block, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b blockDo) Save(values ...*model.Block) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b blockDo) First() (*model.Block, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Block), nil
	}
}

func (b blockDo) Take() (*model.Block, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Block), nil
	}
}

func (b blockDo) Last() (*model.Block, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Block), nil
	}
}

func (b blockDo) Find() ([]*model.Block, error) {
	result, err := b.DO.Find()
	return result.([]*model.Block), err
}

func (b blockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Block, err error) {
	buf := make([]*model.Block, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b blockDo) FindInBatches(result *[]*model.Block, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b blockDo) Attrs(attrs ...field.AssignExpr) *blockDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b blockDo) Assign(attrs ...field.AssignExpr) *blockDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b blockDo) Joins(fields ...field.RelationField) *blockDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b blockDo) Preload(fields ...field.RelationField) *blockDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b blockDo) FirstOrInit() (*model.Block, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Block), nil
	}
}

func (b blockDo) FirstOrCreate() (*model.Block, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Block), nil
	}
}

func (b blockDo) FindByPage(offset int, limit int) (result []*model.Block, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b blockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b blockDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b blockDo) Delete(models ...*model.Block) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *blockDo) withDO(do gen.Dao) *blockDo {
	b.DO = *do.(*gen.DO)
	return b
}
